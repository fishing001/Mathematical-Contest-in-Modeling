%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 323.000000 263.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.2 (Build 16C67) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 323 263
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 323 263
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /u put
dup 35 /r put
dup 36 /f put
dup 37 /a put
dup 38 /c put
dup 39 /e put
dup 40 /space put
dup 41 /W put
dup 42 /t put
dup 43 /I put
dup 44 /n put
dup 45 /d put
dup 46 /s put
dup 47 /i put
dup 48 /l put
dup 49 /g put
dup 50 /o put
dup 51 /G put
dup 52 /O put
dup 53 /h put
dup 54 /A put
dup 55 /D put
dup 56 /m put
dup 57 /E put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B8000210B80016D0B800162FBA001700020001111239B8000210B80018D0B800182F00B800012FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855112A443339541B020205FEDC233B2C183830015EFEAC2A45321B2D305200000000020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000451BB6635F0F3CF5011103E800000000B643600000000000D34D8599FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000001B01F40033011600000288FFFA02C0004E0263004E02F7002B0103005202F8002602880025039E000C021900240219002402510024021900240128000C023E0024022C004000DE004500DE004503550040022C0040023E0024014D003D01F4001F013B0009022C004004BE0037000000480048007800E0011201A201BC025C02F0032A043404A6054405AC05F806AA06FC0726074007DA082208C208F0099409E60A360A6C00010000001B0096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 27 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/D 3 def
/E 4 def
/G 5 def
/I 6 def
/O 7 def
/S 8 def
/W 9 def
/a 10 def
/c 11 def
/d 12 def
/e 13 def
/f 14 def
/g 15 def
/h 16 def
/i 17 def
/l 18 def
/m 19 def
/n 20 def
/o 21 def
/r 22 def
/s 23 def
/t 24 def
/u 25 def
/uni2B91 26 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C926597C1DAC1BA3798797E796C89ECAEC4435602C69EF8DE4A6951510F1F56EAD7EC0A94E754F83AB6B3BD6B68DDF96AD90CC45150E6740B8358220465AD94967447004B7D711BF4170E7B790C6730B5694CDCB17A06D8EC675BF97196C43A64A12045942177A8B25CDFF19CFBED7383629C28EF7FDA0C83DAF21790924C17BD5828A788F633F8BA9D00BD9D4475082A520900A62F14A026D79CF55416048E7269A43EE1BFE3FF27C000501101CD362F915CF0C04A27E7729BC61F20DDBB2BE3021A2FF25DCD038B4BA0122610E53B06EA6D3F20B99A5A5AA668EEEFFC64515A6EDB0BA5C5FF3BB0C89E43A62A780F54DB1D1865971F8CD7298F381F5329CA4FC020A290AB8A81987BDA35CBF5826B92435A5E51BE763450D709F34F0F74D5459ED3FA33895C95A631AF2FCAE1CD6A2835DB7A9B7FCF39504D0CBB8D8131B5ED3AFE2D49AB9F3C2F947F05FEADE6DBFEA6C07E7D8FD30001F2FF0FFA1931346FB310DD4FC7605C39C523E37585927EAF0C14FB8C04BED982402596E6034D52887C9E70E8116FC337AEA71D0263080FFFCAF232FC2446F3D3963863A7B97B93F843B0D549F551FF95BC6EDA0469543D27A478955C4654CC437BFD271380AA71E9808BC3925D65D2886C8B210D83AFE50DDA65DD52F309EEF798A5D485A058BD4220241878D634153808230567F30E61C8A09E7C9CFD926D7A89C75A7CB664F969E310A655C4F4B50E4A62E20AB175496870A8AAC2F63F1249CEFC1C3DC0DAD0A982
35181A1E166C21050E82D311678D280732AF7AC19D6748C4857521353F91919D5F94F784433AFE15BDACE6D59482A11A0652FB7F12F64E510ABCF0165D26C1F276CAD8A7D0BAE9D70BAA810AABFF6806E17C57BE4A8BD1E6EFF028B8CE1E0F5C82AB0ACE1423E1622D311F8399B1E400BEF2FC01F672844AE4B1A9D673F57C6C0790FA57802AE7B9C6C71E7BC2E8968F877A5947A0EC71BCA0C978FF8CADC4B983EC737294A04939D97A517E23FE1182BB9C60B049ADB5393EFDE5F28024705CDB94C6ED8241C4B9115E1546B57D4BCE7FE3C41AF9CFEF61B0D3E79BDADF3F1F06E98C24611D40A91E79293BB2529B586E8E6E3EA06AC68EEE6F4A27CC310ABE089981F125A7A3FF27EE9AE26E2896AD1FDB3554F28E0C0FD48B3F5D1BBF06DEA46714A22EECF4F41C4F021ABCD274BC7157DA5EAC746CD19316DC34EDB5DE43C52180821AE12519175C56E084342CD7536F9C8727565A3553B390A7BA10B4243784E821EB102C419A78F978626BB3C4C9719DA9DD33CDA0C0126D37A98142BE6A374A1F194E746A80867C4F5BE8015CFE0F2BABD951199BF879A88065FB39B0C6E13A58FF094D289B8666EE98A3BC9D0FB64EAA47CC020C70DF06D0874230B06AB087BAAD3D3D40C3351E3B250837EABB07CF32AA2273156203B49D186CCA7433DDD80018A695359A08A700BCE3F7FB88E5BE56073FEB2007BF059850DBA93A27CA9EE1139F2773DECED5C3061516D912D9F23678C622F5772430F9AEC95DB50E79094EA4A803593C1D4369878663C4438DBED7373EB3219DDAAE1C6CF60469EF21AEF821EBBE05252320944CDA4389D2C8708836F0C89923B550AC4F55DE51E1E3D0F2FA64300871657D29D72F320BE0354366EA942CDE1C5B82A6E11B35A19ED800639BD9EDAD7ED72D6DDAAADD8132227312135CE81811872B54B76AA06CB55E379378A28081C9C230108162FEDF994046AC4360EE760F56E3E51862E85A0AFF7F726FE4A74C8F42D7CBF5BB1CE604ACCB3343BA991A55859E5C33DF3C29413C7CAE56AC2176655FE326454ADD75B9E3076EAB723929DA64AB40C0A33EA68D1072795BA90E6917FC10291898C11CCC3BC5E3BC476F09BEBDD1003A9C3242D193FC10E489C8F02453BBA41524B5BFAD2D02D3A2B540791C9D17F7E65837E510255008429B9B156B764E2BC0BBB6897AC2EC741DE669962FA0103D4A725CC149DD76B5C3727B327735C8F99B076EEE238AD94F1F7BC337CAB9375648610A38EBF8721C9B790424C4257ED064BA3B9C1CF7B3820807BD89F2296A5CF73D1DB3FB48C883850CC7B4BDC84F70BEE11D9B5C86FD9C9BD53DCF64618101E8EAE5854D736B593382C4BCF0C7275E4C7703B57500A782FC4F04EEF6AB4E529AFB9199A0AFD6A407973FC9CF641779D7191E67980AA7FD8D8233B773E4458118FEE33B

299C5CD4D6442A70A18CE1C8D249F231104A3AA61B5C38E9F0530426E8D6EBF4C77B97DB5DC1DBA56F0DAF86A39E51FBD0D2537190471ADD7C43841942E7A20815A2D6CBBDC067E3A16B5B74D25C46C48C02204052F8F4E25DA03433B0257763B91E3F11DD8030D43C6F75D8FDA1E88AD81EF2F4B790359545EF1A05DE08219E4CB555EFF86FCAF0B068F989F5731102B238879B338B817463EF6E97711D7B0F164C8B6CE53C8BFF168AAAFAB7FF10093CBD39C6F8E59B70BD040EDB0593069B4E91511DEE9215C2823EC6F5C2946834C7098AC68CF13A6B55D7FCE659566C5E0A122469226D405DBF3354A1C2D71245871218FFCD809EF553E2AD0AB2EE982E40F2AE2B29AA5F279D9CB22C1170235D90725237CA75C55A1CCD2284CE0E89E4EC7A4CE594826C36262412A0712665C48D7BE95A27046C56FEF0131511C1909319293D6C92B608A98359C45CE3F4FFC3BD85DB5B4DA804C8D81671A404D28E40297B97C0DDB17F14AD9AEDDA2E605B6151C62EFB00F0B1CA93C416993CCF58B173C12D4B9015418DFCE654A8FC357524B666FFF3D44F9146AEFA47981A502DCD36D848AE90DEFE0F77A92BFA983CCF0AE90AC6D8E01E71D1FB04E958835FC956540A2194F7E234D2753C7AB73427E2D9EEC182C3790EAFB2A9B3AC60770CB568B9E9C6F23210E43A04DE9F7DD78D9B128BD4C123EF50536B442B374AE339D83E31512E1FB2D478B621B90353E0D8491ED09BF3122929A071EAC750B9D4C2A7981877BE28EABAE398BA513247FA34A2BC70F34AF04C71B41762A09EFEFCEEDED420AB1E629C37C3CF9FDC2FADA98E75A240A2DA684CAA6FC97145AD3408961FA6D65D8C50495791C4882A13F9F29692879DD86369C9A5327BDD5CB3151E79728D4FE623D409C2329A2E666EFFC4DC2287417A2EFBACF39B8B3D86C8D2E215C06A7FE531E73F375962F6240172E1F87E73B629B6EE1A26403E1319348A6CF86D53E9882DA48571D12B7820AEE76A1B8DA3EF04213D0534E3565D263DED3997493775EBEE7C72A912D19A376A897033EBB050F088B1D7358392B34F90804336350D8FB16FD06B01248A3FF622B8110B288440DD250D93B43D8C752BC47C87A045EE2E1C23964027E2481CBC8745597641A04B576ACDF8573A58E507DAF9937A2BF86B7E135F5C9D23BD3C7CEC9FB9DD6BA219C97C85D5B98AA2AE71EA9539B8B32A95151002CB46654E51D1DE7B78E2B90910EBDDA2E59627C7D47331C579B94758E6CD01DD8A6ABCE75B00B0879B9FAFF407E3B1F60173FCAFA40EAAE63520CD65030E9D955842C7C065C7F4FCABEFE3CAB767787FA383DC1CCE3300B94C639348E9B2AD7886F3E6992FF290A2B7C634C53F980E4FB25CFA3EDDC468A91ECEBE419FD06F5595C70A300D4F7B798A0CA4617CC552E7053A0A4585ABAC1727DBF658

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 323 263 rc
-1405 1310 m
1661 1310 l
1661 -1072 l
-1405 -1072 l
h
-1405 1310 m
f
0.741763 0.21325301 0.073530398 sc
1 235.5 m
57.692913 235.5 l
57.692913 178.80708 l
1 178.80708 l
h
1 235.5 m
f
0.75 w
1 J
1 j
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
384 280.5 m
440.6929 280.5 l
440.6929 337.1929 l
384 337.1929 l
h
384 280.5 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 29.346457 207.15355 cm
/F1.1[ 10 0 0 -10 0 0]sf
-17.219999 -2.2799988 m
(!"#$%&'\()[ 6.480000 5.560000 3.330000 2.960000 5.370000 5.370000 5.370000 0.000000 ] xS
-13.055 10 m
(\)%*'#)[ 8.890000 5.370000 3.150000 5.370000 0.000000 ] xS
0.12754899 0.462659 0.782314 sc
CM
265.3071 262 m
322 262 l
322 205.30708 l
265.3071 205.30708 l
h
265.3071 262 m
f
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
648.30707 254 m
705 254 l
705 310.6929 l
648.30707 310.6929 l
h
648.30707 254 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 293.65353 233.65355 cm
-20.465 -2.2799988 m
(+,-".*#/%0)[ 2.590000 5.560000 5.930000 5.560000 5.000000 3.150000 3.330000 2.220000 5.370000 0.000000 ] xS
-13.055 10 m
(\)%*'#)[ 8.890000 5.370000 3.150000 5.370000 0.000000 ] xS
0.146795 0.57082403 0.52502298 sc
CM
133 163 m
189.69292 163 l
189.69292 106.30708 l
133 106.30708 l
h
133 163 m
f
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
516 353 m
572.69293 353 l
572.69293 409.6929 l
516 409.6929 l
h
516 353 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 161.34645 134.65355 cm
-13.89 3.8600006 m
(#'1/2,)[ 3.150000 5.370000 5.740000 2.220000 5.740000 0.000000 ] xS
0.741763 0.21325301 0.073530398 sc
CM
1 160.5 m
57.692913 160.5 l
57.692913 103.80708 l
1 103.80708 l
h
1 160.5 m
f
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
384 355.5 m
440.6929 355.5 l
440.6929 412.1929 l
384 412.1929 l
h
384 355.5 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 29.346457 132.15355 cm
-16.764999 -2.2799988 m
(3#2",-\()[ 7.590000 3.150000 5.740000 5.560000 5.560000 5.930000 0.000000 ] xS
-13.055 10 m
(\)%*'#)[ 8.890000 5.370000 3.150000 5.370000 0.000000 ] xS
0.741763 0.21325301 0.073530398 sc
CM
1 90.5 m
57.692913 90.5 l
57.692913 33.807087 l
1 33.807087 l
h
1 90.5 m
f
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
384 425.5 m
440.6929 425.5 l
440.6929 482.1929 l
384 482.1929 l
h
384 425.5 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 29.346457 62.153542 cm
-12.505 -2.2799988 m
(4*5'#)[ 7.600000 3.150000 5.560000 5.370000 0.000000 ] xS
-13.055 10 m
(\)%*'#)[ 8.890000 5.370000 3.150000 5.370000 0.000000 ] xS
0.12754899 0.462659 0.782314 sc
CM
265.3071 194 m
322 194 l
322 137.30708 l
265.3071 137.30708 l
h
265.3071 194 m
f
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
648.30707 322 m
705 322 l
705 378.6929 l
648.30707 378.6929 l
h
648.30707 322 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 293.65353 165.65355 cm
/F1.1[ 9 0 0 -9 0 0]sf
-22.747499 -2.2519989 m
(61#/&"0*"#%0\()[ 5.832000 5.166000 2.997000 1.998000 4.833000 5.004000 1.998000 2.835000 5.004000 2.997000 4.833000 1.998000 0.000000 ] xS
-11.7495 9 m
(\)%*'#)[ 8.001000 4.833000 2.835000 4.833000 0.000000 ] xS
0.12754899 0.462659 0.782314 sc
CM
265.3071 126 m
322 126 l
322 69.307083 l
265.3071 69.307083 l
h
265.3071 126 m
f
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
648.30707 390 m
705 390 l
705 446.6929 l
648.30707 446.6929 l
h
648.30707 390 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 293.65353 97.653542 cm
/F1.1[ 10 0 0 -10 0 0]sf
-21.209999 -2.2799988 m
(728'.*/&)[ 7.040000 5.740000 8.530000 5.370000 5.000000 3.150000 2.220000 0.000000 ] xS
-13.055 10 m
(\)%*'#)[ 8.890000 5.370000 3.150000 5.370000 0.000000 ] xS
0.12754899 0.462659 0.782314 sc
CM
265.3071 58 m
322 58 l
322 1.3070869 l
265.3071 1.3070869 l
h
265.3071 58 m
f
0.60000002 i
0.324366 0.407177 0.43850601 sc
1 0 0 -1 -383 516 cm
648.30707 458 m
705 458 l
705 514.69293 l
648.30707 514.69293 l
h
648.30707 458 m
S
0.98824 0.95686001 0.86274999 sc
0 i
1 0 0 -1 293.65353 29.653543 cm
-23.049999 -2.2799988 m
(9&2021/&%0)[ 6.110000 5.370000 5.740000 2.220000 5.740000 5.740000 2.220000 5.370000 5.370000 0.000000 ] xS
-13.055 10 m
(\)%*'#)[ 8.890000 5.370000 3.150000 5.370000 0.000000 ] xS
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -383 516 cm
441.02161 324.59607 m
506.99399 360.8309 l
S
0 i
CM
131.00597 151.31783 m
125.43823 157.79858 l
122.54977 152.53961 l
h
131.00597 151.31783 m
f
0 J
0 j
1 0 0 -1 -383 516 cm
514.00598 364.68219 m
508.43823 358.20142 l
505.54977 363.46039 l
h
514.00598 364.68219 m
S
1 J
1 j
0.60000002 i
443 381 m
505.72507 381.21442 l
S
0 i
CM
130.72501 134.75822 m
122.73531 137.78555 l
122.71481 131.78558 l
h
130.72501 134.75822 m
f
0 J
0 j
1 0 0 -1 -383 516 cm
513.72504 381.24179 m
505.73532 378.21445 l
505.71481 384.21442 l
h
513.72504 381.24179 m
S
1 J
1 j
0.60000002 i
441.02161 438.09686 m
506.99399 401.862 l
S
0 i
CM
131.00597 117.98927 m
122.54977 116.76748 l
125.43823 111.5085 l
h
131.00597 117.98927 m
f
0 J
0 j
1 0 0 -1 -383 516 cm
514.00598 398.01074 m
505.54977 399.23251 l
508.43823 404.49149 l
h
514.00598 398.01074 m
S
1 J
1 j
0.60000002 i
572.68329 352.73355 m
640.03363 284.72711 l
S
0 i
CM
262.66302 236.95709 m
254.90208 233.3839 l
259.16522 229.16187 l
h
262.66302 236.95709 m
f
0 J
0 j
1 0 0 -1 -383 516 cm
645.66302 279.04291 m
637.9021 282.61612 l
642.16522 286.83813 l
h
645.66302 279.04291 m
S
1 J
1 j
0.60000002 i
574 371 m
638.88629 350.04276 l
S
0 i
CM
263.49905 168.41603 m
254.96423 168.81203 l
256.80832 163.10245 l
h
263.49905 168.41603 m
f
0 J
0 j
1 0 0 -1 -383 516 cm
646.49902 347.58395 m
637.96423 347.18799 l
639.80835 352.89755 l
h
646.49902 347.58395 m
S
1 J
1 j
0.60000002 i
575 386 m
639.56702 420.35019 l
S
0 i
CM
263.6297 91.892387 m
257.97601 98.298325 l
255.15796 93.001289 l
h
263.6297 91.892387 m
f
0 J
0 j
1 0 0 -1 -383 516 cm
646.6297 424.1076 m
640.97601 417.70169 l
638.15796 422.99872 l
h
646.6297 424.1076 m
S
1 J
1 j
0.60000002 i
574.76953 396.93359 m
638.68683 479.41934 l
S
0 i
CM
263.15985 33.72509 m
256.75769 39.38303 l
254.616 33.778282 l
h
263.15985 33.72509 m
f
0 J
0 j
1 0 0 -1 -383 516 cm
646.15985 482.2749 m
639.75769 476.61697 l
637.61603 482.22171 l
h
646.15985 482.2749 m
S
ep
end
%%Trailer
%%EOF
