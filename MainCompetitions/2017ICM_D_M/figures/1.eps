%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 618.000000 131.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.2 (Build 16C67) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 618 131
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 618 131
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /h put
dup 35 /e put
dup 36 /c put
dup 37 /k put
dup 38 /p put
dup 39 /o put
dup 40 /i put
dup 41 /n put
dup 42 /t put
dup 43 /T put
dup 44 /space put
dup 45 /a put
dup 46 /s put
dup 47 /g put
dup 48 /r put
dup 49 /b put
dup 50 /d put
dup 51 /P put
dup 52 /v put
dup 53 /q put
dup 54 /u put
dup 55 /y put
dup 56 /l put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/space 1 def
/C 2 def
/P 3 def
/T 4 def
/a 5 def
/b 6 def
/c 7 def
/d 8 def
/e 9 def
/g 10 def
/h 11 def
/i 12 def
/k 13 def
/l 14 def
/n 15 def
/o 16 def
/p 17 def
/q 18 def
/r 19 def
/s 20 def
/t 21 def
/u 22 def
/v 23 def
/y 24 def
/uni2B91 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9264C9384F249EBFD8DD5BFBB9BE844B0E83BCFE532E688793A86D21BB50B73F1E4CB55B3332FA078523601D7D59E771AAD72B0C3150466C78199AB7245DDDDDB744BE485E1956EC9C8F9F94015171004093B221EFCEA2ED2C5237FD6408A1F600E98635D7DADBE2A9F226A88A706E2A58B6FEC99E65AAADEA3155CEDE53FA98BED4E38AEE509D6CB1F6F46AF64844CDD142A776920D05A1F615048FC942F30C7E7273C1EC9EEA1011066EDC4A9D1F0699940ACB1260F10D25AD8E9C621F6A748580BEB7CF7E39C423B720D2CADB0541F0DAFA55502FA84159EC3CB238AD6FCE614DDD29A7B6CF9D00E6B55F04EFC6A9DE244DB0194E015452B6942FA9CB5025D4B75E44B5A65013A14E25D1F93517F1C7347F465DFE1237D9B1A1BBE37F3B7A0CC9DC6F9353F1C04ED51F2A04E1DD6E4111EDD5C7B36DFEBE6F7E50F88F64895F822360B5210ADA142BC817C16F0EBCD6EA2816CCC9DC7F68CD877296C7CF317DB50F83632F63A00A8FF01EB75BEA3615FC75BE9AC9E3D2ACD63C792F1117FD80CBA8AD2A58AA1F145AC671E0AF36E33124435541181A94F16CE09C620DF725E50D2D95B9B4CDB50BA4EFBAD28080664F66C4318E6D15EF7A372D8D75DEDEE73132AC14E558D61B615FD39C5158CC4494B24E6FB68304F2EC65BD0490B61B368EBC11E2CDDCC795A15B2682BC5621D950CDEEA0B86281322E45384FBC4937071A94DE9E2D6D051D976FDACE2B37DB5BAA0B960F5708E821AF68E678F93E9E76BC



9C4D0E7529A39B2F4079284576B56DCFCA2AC8AE1F77AB3FE7A19248922AFDA3D93548B96BBCE50A9593691F879C7824DEDE23B06F87803024D92AF2CFF8F2B5456ABB09F42F028EE862B48C2D5AC41788B612268D26A63AF2E08453F08F4CB6FF464A817A2AB6A3C40A3047108E4015E8C9CBCC5E838E6CAF54E285D58539ECDF0DA126107B814D09D2AC9FBDDDFC5FA95DD66EDDDF502584159F4CE16D2655760B96BD20AB59EB1528951B8289CF05CB2562AF429B9699B5B59B198B5DA83399F7F624739FFE6FF2E135495A539D188515117682168D0783E4D24CEE5DD7613D35DD26B0956DC483BDDE843B2491F0ADB60BE004A05AC927EC9CD588805DF4558369F31A7590A27F6F3768CDE65C6AE7CFD0D25A12812A7E6F6593B8D154FACD7B91A163C3255735AEA6D16EC8B17B8DEF7810BA79EE69D50F7BCB4FCD20A2CF326A464B49966D711AD82E1F9C97CECF8AD149A1957C95064D056DFC11D13A85A9245438E9CBD1FCDE7471A9DD0F571F39D9F2DF1E74675C5C47D02700F0AA574080E62656234FB65DA21D69B33FFAB5281DE1ED7D94B7CD011D953FA2EAC95EA2E647F13B6B75E58211A66497E3154935C682E6C448990B65C6788A470821493E4A2B005CB9989E28A694479B00160D72EB0F68B8F49F34FB5E9B5A6618A976F8AECED15DA5ED91A41FF8F441013A5D5D106E10D3E55216C7FE5B28466A512B3B67603C4A97E9110ABB485B76AFE2986CC84C1430EE694EA738355773F946B595D7B1895422BD570AA18EE001D885A07761908AC71C78AFD55E9C52A82B298D8B8E27D3795CD140F5C2085895BB867B8B48BF2D409D5464A6ADF8614326176A1B6282E2C676E51CC356937432ADC486D5939DF029C467F9A7D044F5F824EB2F4081F7C8D845E35510B91697F13261EE0C8EF56C96802696BE2CDB085ECE68D068C2044AABC77DA44AD5E8C51ECD3BECB56BCCB98A56D5FF3A6022B371C6160C0B16496F899F7AB03981ACDFB223DEE086CE9EBF299CADF6CD44207BD356E01A0492D275E609C0572612609CB25326CA1B147FB5F3A4CDE37283F00B63244BD1A46EEC79C53BF5FDF6AECC8273A16E5B9AADE37757979049233CDFEF18B2FBE00724FBE0B1D72F0FC01AEFBFB56A88BEEBD2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 618 131 rc
328.5 96.5 m
396.5 96.5 l
401.47055 96.5 405.5 92.470566 405.5 87.5 c
405.5 75.5 l
405.5 70.529434 401.47055 66.5 396.5 66.5 c
328.5 66.5 l
323.52945 66.5 319.5 70.529434 319.5 75.5 c
319.5 87.5 l
319.5 92.470566 323.52945 96.5 328.5 96.5 c
h
328.5 96.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -85 346 cm
413.5 249.5 m
481.5 249.5 l
486.47055 249.5 490.5 253.52943 490.5 258.5 c
490.5 270.5 l
490.5 275.47055 486.47055 279.5 481.5 279.5 c
413.5 279.5 l
408.52945 279.5 404.5 275.47055 404.5 270.5 c
404.5 258.5 l
404.5 253.52943 408.52945 249.5 413.5 249.5 c
h
413.5 249.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 362.5 81.5 cm
/F1.1[ 14 0 0 -14 0 0]sf
-35.917 4.8040009 m
(!"#$%&'\(\)*)[ 10.108000 7.784000 7.518000 7.518000 7.266000 8.302000 8.036000 3.108000 7.784000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
303.57104 88.57106 m
307.47632 84.665817 307.47632 78.334183 303.57104 74.42894 c
299.66583 70.523682 293.33417 70.523682 289.42896 74.42894 c
285.52368 78.334183 285.52368 84.665817 289.42896 88.57106 c
293.33417 92.476318 299.66583 92.476318 303.57104 88.57106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -85 346 cm
388.57104 257.42896 m
392.47632 261.33417 392.47632 267.66583 388.57104 271.57104 c
384.66583 275.47632 378.33417 275.47632 374.42896 271.57104 c
370.52368 267.66583 370.52368 261.33417 374.42896 257.42896 c
378.33417 253.52368 384.66583 253.52368 388.57104 257.42896 c
S
0 i
1 1 1 sc
CM
197.07106 88.57106 m
200.97632 84.665817 200.97632 78.334183 197.07106 74.42894 c
193.16582 70.523682 186.83418 70.523682 182.92894 74.42894 c
179.02368 78.334183 179.02368 84.665817 182.92894 88.57106 c
186.83418 92.476318 193.16582 92.476318 197.07106 88.57106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -85 346 cm
282.07104 257.42896 m
285.97632 261.33417 285.97632 267.66583 282.07104 271.57104 c
278.16583 275.47632 271.83417 275.47632 267.92896 271.57104 c
264.02368 267.66583 264.02368 261.33417 267.92896 257.42896 c
271.83417 253.52368 278.16583 253.52368 282.07104 257.42896 c
S
0 i
1 1 1 sc
CM
227.57106 88.57106 m
231.47632 84.665817 231.47632 78.334183 227.57106 74.42894 c
223.66582 70.523682 217.33418 70.523682 213.42894 74.42894 c
209.52368 78.334183 209.52368 84.665817 213.42894 88.57106 c
217.33418 92.476318 223.66582 92.476318 227.57106 88.57106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -85 346 cm
312.57104 257.42896 m
316.47632 261.33417 316.47632 267.66583 312.57104 271.57104 c
308.66583 275.47632 302.33417 275.47632 298.42896 271.57104 c
294.52368 267.66583 294.52368 261.33417 298.42896 257.42896 c
302.33417 253.52368 308.66583 253.52368 312.57104 257.42896 c
S
87.707031 264.5 m
137.48698 264.78516 202.92708 264.71484 252.70703 265 c
253.04114 264.98288 253.35277 264.96628 253.64362 264.95013 c
S
0 i
CM
176.60876 81.817688 m
168.35782 84.036224 l
168.93353 78.063911 l
h
176.60876 81.817688 m
f
0 J
0 j
1 0 0 -1 -85 346 cm
261.60876 264.18231 m
253.35782 261.96378 l
253.93353 267.9361 l
h
261.60876 264.18231 m
S
CM
245.26776 85.267761 m
246.24408 84.291458 246.24408 82.708542 245.26776 81.732239 c
244.29146 80.75592 242.70854 80.75592 241.73224 81.732239 c
240.75592 82.708542 240.75592 84.291458 241.73224 85.267761 c
242.70854 86.24408 244.29146 86.24408 245.26776 85.267761 c
f
272.76776 85.267761 m
273.74408 84.291458 273.74408 82.708542 272.76776 81.732239 c
271.79144 80.75592 270.20856 80.75592 269.23224 81.732239 c
268.25592 82.708542 268.25592 84.291458 269.23224 85.267761 c
270.20856 86.24408 271.79144 86.24408 272.76776 85.267761 c
f
259.26776 85.267761 m
260.24408 84.291458 260.24408 82.708542 259.26776 81.732239 c
258.29144 80.75592 256.70856 80.75592 255.73224 81.732239 c
254.75592 82.708542 254.75592 84.291458 255.73224 85.267761 c
256.70856 86.24408 258.29144 86.24408 259.26776 85.267761 c
f
1 J
1 j
0.60000002 i
1 0 0 -1 -85 346 cm
491.5 264.5 m
541.27997 264.78516 606.72003 264.71484 656.5 265 c
656.83411 264.98288 657.14575 264.96628 657.43658 264.95013 c
S
0 i
CM
580.40173 81.817688 m
572.15082 84.036224 l
572.7265 78.063911 l
h
580.40173 81.817688 m
f
0 J
0 j
1 0 0 -1 -85 346 cm
665.40173 264.18231 m
657.15082 261.96378 l
657.7265 267.9361 l
h
665.40173 264.18231 m
S
1 J
1 j
0.60000002 i
362.5 310.5 m
372.69836 288.48309 l
S
0 i
CM
291.06079 64.77597 m
284.9762 58.777824 l
290.4205 56.255993 l
h
291.06079 64.77597 m
f
0 J
0 j
1 0 0 -1 -85 346 cm
376.06079 281.22403 m
369.9762 287.22217 l
375.4205 289.74402 l
h
376.06079 281.22403 m
S
/Cs2 SC
0 sc
1 0 0 -1 284.67969 15.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-107.728 5.776001 m
(+"#,&-..#\)/#0,1#\(\)/,$"#$%#2)[ 9.184000 8.896000 8.592000 4.448000 9.488000 8.592000 8.000000 8.000000 8.592000 8.896000 9.184000 8.592000 5.328000 4.448000 9.488000 8.592000 3.552000 8.896000 9.184000 4.448000 8.592000 8.896000 8.592000 8.592000 8.304000 8.592000 0.000000 ] xS
1 0 0 -1 86 96 cm
-63.695999 5.776001 m
(3-..#\)/#0.,-00\(4#)[ 10.368000 8.592000 8.000000 8.000000 8.592000 8.896000 9.184000 8.592000 5.328000 8.000000 4.448000 8.592000 5.328000 5.328000 3.552000 8.000000 0.000000 ] xS
1 0 0 -1 223 110.5 cm
-37.792 5.776001 m
(+"#,56#6#)[ 9.184000 8.896000 8.592000 4.448000 9.488000 8.896000 8.592000 8.896000 0.000000 ] xS
1 0 0 -1 500 116 cm
-112.024 5.776001 m
(.#$60\(*7,$"#$%,#\)2.,-\)2,8#-4#.)[ 8.000000 8.592000 8.592000 8.896000 5.328000 3.552000 5.040000 8.000000 4.448000 8.592000 8.896000 8.592000 8.592000 8.304000 4.448000 8.592000 8.896000 9.488000 8.000000 4.448000 8.592000 8.896000 9.488000 4.448000 3.552000 8.592000 8.592000 8.000000 8.592000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
