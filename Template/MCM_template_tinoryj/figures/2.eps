%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 704.000000 197.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.2 (Build 16C67) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 704 197
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 704 197
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /h put
dup 35 /e put
dup 36 /c put
dup 37 /k put
dup 38 /p put
dup 39 /o put
dup 40 /i put
dup 41 /n put
dup 42 /t put
dup 43 /space put
dup 44 /two put
dup 45 /P put
dup 46 /a put
dup 47 /s put
dup 48 /g put
dup 49 /r put
dup 50 /v put
dup 51 /T put
dup 52 /q put
dup 53 /u put
dup 54 /y put
dup 55 /d put
dup 56 /l put
dup 57 /three put
dup 58 /one put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






3C301F142027131529221602550322394A2C22453723324B584B3218252C141A312718A3304329120F263E2F2532211407070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B8000210B80016D0B800162FBA001700020001111239B8000210B80018D0B800182F00B800012FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855112A443339541B020205FEDC233B2C183830015EFEAC2A45321B2D30520000000001000E000001E602050007001900B800012FB800052FB800002FBA000400000001111239303121132303230323130129BD598D02915FC00205FE5101AFFDFB00010008FF3101EC020500160086B800142B00B800014558B800112F1BB9001100083E59B800014558B800152F1BB9001500083E59B800014558B800052F1BB9000500063E59BA000900050011111239B9000C0002F441110007000C0017000C0027000C0037000C0047000C0057000C0067000C0077000C00085D41050086000C0096000C00025DBA0014000500111112393031050E0323222627351E013332363F01033313331333010B0F1D232B1C0F1E0E0B1D0A1A230923CD609702915A452634210F04054E05071917570202FE5901A70000020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000451BB6635F0F3CF5011103E800000000B643600000000000D34D8599FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000001C01F4003301160000022C0057022C0018022C001D02D2002B0288004E023E000202190024021900240251002402190024023E0024022C004000DE00450207004500DE0045022C0040023E00240251004302510024014D003D01F4001F013B0009022C004001F4000E01F4000804BE0037000000480048006E00F601DC024A02B202D803E2045404F2055A060C
065E068806BA06D4071C07BC085408EA091809BC0A0E0A5E0A7E0AE80B1E000000010000001C0096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 28 dict dup begin
/.notdef 0 def
/space 1 def
/one 2 def
/two 3 def
/three 4 def
/C 5 def
/P 6 def
/T 7 def
/a 8 def
/c 9 def
/d 10 def
/e 11 def
/g 12 def
/h 13 def
/i 14 def
/k 15 def
/l 16 def
/n 17 def
/o 18 def
/p 19 def
/q 20 def
/r 21 def
/s 22 def
/t 23 def
/u 24 def
/v 25 def
/y 26 def
/uni2B91 27 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C926AE0E2EF20EAFDBFC5FC1E83BEF5713FF899F5A98AA12E11EE8D7354F595CC6D37173434FCBC249E6FDA96A366A295C828D390FABFE64C7E9F699B5405A2C872384A63279AB008EB4A93D53383E434DD1AABA94DA73A38370A3E40A5A01425793A14D16791BBA27D891B50AD6603B4041CBA952DFC11E668CFF9CCD89C38F056D0203E163EC04550A4E293C6D17CC72F261AE205D0CA283B375D0E10F8BBD2AE3EA387D4D03C08C55552F2A3E4C534FFC7FCCEB977ED5DE7937E97A20CF81E0111936A6E88085020B924F7328A82C12E8A22224074E10D2910919107CFF815654354281CE837FF30C4CE44ECC55959B2E1E19B4B9B2A492F528FF9506DF6A7D206BC66883952824FE1C5F3BB597B6F48F2625547AC54D801EDF1FD115FD5D8F2A968B4F0A0527F326BD47CFA6E14E1D95E995B14B1E009D4C5A51C907624C39CD31F880E82EF6C87A85B29F5DD54B7AAD0676779284E0F0295221D8864D58EAC59F672442C32E547A6822902DB630C410F4582583396E962ADC59E61B104A6C7EB75E71B3E177AE46AB2AF0C51A1BA231AB90279011B465BBBAA79BD700DCA27B71DE61ED019381D367D32EEAB47888A3006C1DD8C1E0D90280F92F6EB0287CC9B59455A3559B7F29DBB385C3E09D3A51B1D872FEAFAD5CD10689A76E6C96A27AD4EF8E9D18EE2CEAF1B2F2D14444CF930850E80CD15D5D6EB1E1D7A99B2F081E0A09A7BD2E5E868DCAB67A1FFA7CCBDD67EA4437A3B0C46047671CB95CFB9A1

9700914B1E0D5D4635934B42B332A8D86E30082D2D23BCE0DD4E6FBC39618954A08EE6BFF320061B8759B23C41941FEC8B073E8F0E26EE2CB8BD916FD27CF8F9C54A8B506F05C47E89A55BF33457230494A9D4FB4BA0276D8D395466F5738DCEA22B9F6540BB0887F445201077D7F26544DCD203AA83ACCEF48301385BD613BA5EC0FDC94B00AFAD0E1875447C816B5D76A4B9F7A66BC5B920AC5481248A0AFD53C665848AD6A5BBD59370A2E432495DBAA4B1F1E49EF4EAB4E0C6564E91D42667EC2B275D516F6BCF27FA91905F7C551DBBA10AFB8A6E33EC35AD84325C5767B6F682C2CDF51A48C02131CE050BBF6078F83B10C18D2AE2CEFAC65930A289FF157C6EB939170EE8727D15456E8F06C7B56515F33DF5F81BC28F198B1B8F10A407D1DED1B0D4B563DBFD9456113981090FB4CCCDF1A9DD05C0B4512EA3AB1CB38DEF9BDD96C4EE104F7A9EC67F39DC9F5744BE957F7B7CCF1F06CAA6CB19FA2C1A6993E07BDDBF4CE89352E9C7DD144A30A5FC0E0EEAFB700BF4CF5D5D1E945A44F53BCE6E35D7BE4E66C03F0EE61899C490F7E67B308AA9F71BFFE49B58E564C5E41CB609286021606D1857BEBB0EE15F1C60BFE6E8F4D1726551F206831EE72CD55129B643DCF591CB57BE42BF85B93D08C87A082800D2EC2871F0D759CE399041A21EA61C22C37B92AA23E6D37E22A2601ADB739A53737BAFEE77C39E9F0B9AAB096D6C27BFBD74DDE42E6E0DAA0018C498A0A52817923995560570F046C157978F452919E38D72D227462A7803DCE02B3D07AEF81F74EA09CB94EC17482D2BB334FD2F4798567C43A612D51262DFBC3DCCA51377E4F91240272CBC5E799BFA64567BE08B7A607688E5E967F95BE5A18F0CBD5826A017EBEE2D501DC09E0B5761F95F89145E121BE937A9F415009AF5940CBA57209A1886E6D2CC7443CB7F3CF7EC95A9E7F01AE51402C986B26B8F84607EDB841083A19E56ECB997173A233E65F69E720FEE7FFA9E2265006C61415C1AD9405D6B27C9A1EDF0A012C3BE07F0C7D6C0D1129F9CA8D07A6F5684E37FF2A2411104B54C8499DDC68C950E456901D651E46A65A433FD7B6F8D85AE29BC21E9017B3D4500B830F85C10FF418B86C8407ABB91BA952A5C884D4E9E7B7FA4B1D383E0B3ED333C4D325590B0B6FFB5715579A5B6DA954A5D960D866293C6535EA32AF7F472990A4CE93C853383B9303A5E0C3C810DFF20CB0E50A0C04E8EFDE19D09E47565934CCDC196781C9ABDBF6AA707DCABC1AD28EE37EF075AD09B395A6CAAC78CFAF2B67874FDA7490DB00322D92BC1F9CE45B087F90A65C1FC4E8F2DDDA10662D3AB5EC599E997BD75284349053EA056CEFE9B3C99257AD1E93456CC4981A8E7B79786D587BD32439FC42B2582AD10675835C22D57C7B182719CEF7C85481FA8FC3D6DCDC55727F195B939
703FFC87024AA2FA6504D50853DED960B8B78848A37B5608EDDEC0ED54E14B2C868CB6FFA3CC67E82E8F5FCEBEF535FFD94A6C4D3DC5D8537390636908085DB0E849E3E3EFBA54A0CD6FF9F7539305AA01A18EF64DEED2CCE479A0F4B7B85E9D87D057D35287A74554F24977B07E017724EB1281887A1FD282BF657F1A69B62641EDF74683E82B020C9AE7BA7CD9BCC188FD13E35B336569A0742DE24C46EBEA88E5971506777B21EA40E8F429F7C8CA9BB5E0C8CB87C6AA047540F5E45FB6D1C8A0967977BAFCA48786F9CBE6250C5B2ED9AA563AAF7A59F510E0106A57DBB0DE271DA0C607CF5DD05474FFBE2F3520AF4F9663A7F8376966487F6270C97CE92C13567B3BEC272174D8385DBF07E1C566E4F75A26D8E1119985835F35FD2FF8E0D656DC0A8F851307AEABA37D79EF348E55D43ECA24E76DCE8670054BE19CE709E2A823253CE14F6B4132C9774DFA97C214C97F4E66CE35EFDAD795DC996BBFCB1D57B32190414D5FE26714679A5FE49B6AB54F63E931529B8A0F79AE04A22AB0A42B15BB4E250EEA90E42F44F125648C3F26DED28C2697F27BEDD2B3573EB4F1EF933E046E39DE6A94F3E14AE99855A5829A6E632353ADAD7B65A28D0ED09DA095C1CCA16FABE5BCFE7E90A125BA9549F71AD6E9834D74F51A5DD71BCE06A76BAEDF42A07F34E688BB95F7C06F7F8CCCFAD0F2DFBE272199DDDEE5B304E3A811B88BA80D1ABC0C57E1AE62EA875A8F48D470E8D8D9611F65D484C683DA35B4065D44F449ECC57CDE57E7C7EF230A697AA26D68218B64B94626C1978AEB44A5945E6124897C4B39AD78960AF4832D4859AA4A0D2E058154DA137E518896FBFF831650D2EF940196CCE8648D99D6D8029A083CB22D075FB58E5F09781E3EF083EC69122961FF67D46EE9B885F93DD828B2D9D8C571727578F4EFE20FB10A77D95BB5675E54AF99F19BECB8AC7712C55C019AA5A57C3594B5CB756E89AB2DF82E92584390F0A44743A3808B5418D8FBBD6DF684B87A537BB39D3A39D22CD250CE94EB54F0D90F90D7E0F6988DB8EB4AA58A84ADCAA97A46EB0ADAE600F6CD5A2D652F3BF529D80830D125848B7058CC6AEA5C1B6D8ED1C7CE5DE09AD2B36B41F7BDFFE0657AEEC99A2306C32709AF1FED41D5E4938EF99670AAB27A2710FD12267E292464AB7DA8CE452BD238B12ED2C7B02F249BD997569CF957A035361717AEBAF7ECD3834E98EB9E10D03FA503AC0383A73ECD0C95CA965A579807C356273A9605C2A234E556F9CC10BAF59C2E72F4C5BB17CD051923AB38FBE6A847AE3FFA46E72D24D0AE6224268E3576DC63CE7B56F73326D0984E4541D858BA0EACB9D22A1613103C6CD266BEFFCD76150803AB486D7B0A880E56DD8742E67E2B6A9E49262742DA6DF7117AC2173E0F1949BAA328F529604C70C5E813653AB0DDDEB1A0
1B2EAA691C73F2521DBE6B60C3925F99A8B9518810FBCA0A80054CDEFC566E43E96E9C3977F94F6031303DA9C85FE14871ACD5B0BFE5AD64A5D6F487E303F34CCDE914BA3F41673EC5D219CA6624DB07C00E8C5E4A37F104ED9D36D28A1132FB95EEC83D7BE683747189F569648C74840B365EE52BA2927963E9C7914CF2F1152D8BE56FFB1BA42E822F77A81B067BFE2D77DFBB6EEB49C2379828226CE69DCDE86EFFE8EDFB15672B254019CE0407EF27EE286CB0067DDBC829F201D953BADCD310272204420B6839C84244EEF09305B0047DFAC77A1669BFE51FE18A6E00D151F84E4509CA4579B02C423E5C14B6F4F426A7F12F5AC7F2E639A7A8676AEBCFD800E396A8B0FBA4D8F8869F99783D22DBEA1619535D2137290CEBA21AA68BC33C2C00A37039F78C5BCABA187B0C074B859DA175EF89AF9C9734B8397823579F34E311B7056FD45B5F3D9DB1DD93729C523F1162A48304958DA1D455B8AAE2465BACF21BD68954314B7AAB0CD398AD9DDBE300AD8E864E752C7846BC16328F39A51AFC97006C94CD11A6ABD87AD1F8C6C9E0A551AC0180C3CF83981D8945FC1F4600C861C7E373F90BA24A972FB67D3115A5AB99807FB1AB17AAFDE8EABCEF5222B68081FDDF6367B6B5124943A7FFE9DD198A67172B4037710C34F8A501CB01C3F78B2DBA94FA292BF7DC563BE0CDDD5B7DC75A2996B5E9D96B167089F88C22AA72FA927750E8F76C15203652461432BC5A66EB34378790E799E6FF8AC2662FC7CBC0CB3742A7D38AD575DBA016C137BBE28A3158123898F0B307E736677C0FC12A723F115CED0E8DBFC4B072EAEBBD770A2BF1A308EFA17D3A5369729E9026D8D69AD22A38AC0532883667C799012B5090557040F7F06FF45BFE97BAA076E179CC2147F9975EA5173B21BDE44BF12C4490E50742649D24EB835AA210A97E1BFBF17E1A2FA55F825F74DB3CD643608CD08C095190096DB8F732ACC0B0B8E019A88DE51DC8A6F1B975AA2DC5D1C9966DFD23F59E5CA7C0C0B8767FE7E5F0BAE8D983F458B1BC696526485B22BAFE95A13BFC5F682EE2CE73E503B8ED5FE17048822084750195F0B7DAA1E0A07BBE7101B14D2D107981FF4690C8AD17C759724A61E8B8DF978D1B39BE6584D2AA847931B973A5BF606C6F9317D7AB53DDEB5781EEAFE0A49D295DAAD2CE825B036A481803174013236CBCAF350F3A5B03406A9E30E1567F269A87331B6CC42DA65F228829F466A37F86ED09B9780AE9AA7C7C62F1E17CFE69B4669B8A01E4559AF4999999F116CDCCF771C641B2236C35A930E88CBA3CE00F9FFE3CE38D43422111B272707484DF5298E0A8FF23F215E0EE8173E0F5E45CFF0767C34404255282CC8E5C55ED60FFD265285B4681C08D6974C235B238A3ED1003BA2EF28EEEA888FD06F4F6DD68BB89E25A96ABC6D7CFB6EB9F29
9846B9CDB90208D2BA56E15A722A7FAC3A443FCD1EFDEF8F112B9DC7157247EDCFCDBC1A9B0BDDF4122A5FCB54A893136020C9422EB741A96C763799E0DF26BF0BE860766158A4A94A7B5293C6A376F6AA2802B4D13B7FD33B4216A48290D69FEBCFB12D733B2A9AEA0E47DCA4ECAC5B3F94FA76CEB515A327DC703935EEFFE38ADA32D7EED7D49684FCF75C6E8DD264288421998821073F73625FB6F4DC3FC745AB1FCDCE5C8A3507BB5DB9A833C18D77458A51F1A02B657A3077C25C84116AFF865688D96AA487E14177262EE96B3416F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 704 197 rc
414.79297 101 m
482.79297 101 l
487.76352 101 491.79297 96.970566 491.79297 92 c
491.79297 80 l
491.79297 75.029434 487.76352 71 482.79297 71 c
414.79297 71 l
409.82242 71 405.79297 75.029434 405.79297 80 c
405.79297 92 l
405.79297 96.970566 409.82242 101 414.79297 101 c
h
414.79297 101 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
405.79297 541 m
473.79297 541 l
478.76352 541 482.79297 545.02942 482.79297 550 c
482.79297 562 l
482.79297 566.97058 478.76352 571 473.79297 571 c
405.79297 571 l
400.82242 571 396.79297 566.97058 396.79297 562 c
396.79297 550 l
396.79297 545.02942 400.82242 541 405.79297 541 c
h
405.79297 541 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 448.79297 86 cm
/F1.1[ 14 0 0 -14 0 0]sf
-35.917 -3.3919983 m
(!"#$%&'\(\)*+)[ 10.108000 7.784000 7.518000 7.518000 7.266000 8.302000 8.036000 3.108000 7.784000 4.410000 0.000000 ] xS
-3.892 13 m
(,)s
/Cs1 SC
1 1 1 sc
CM
389.86401 93.07106 m
393.76929 89.165817 393.76929 82.834183 389.86401 78.92894 c
385.9588 75.023682 379.62714 75.023682 375.72192 78.92894 c
371.81665 82.834183 371.81665 89.165817 375.72192 93.07106 c
379.62714 96.976318 385.9588 96.976318 389.86401 93.07106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
380.86401 548.92896 m
384.76929 552.83417 384.76929 559.16583 380.86401 563.07104 c
376.9588 566.97632 370.62714 566.97632 366.72192 563.07104 c
362.81665 559.16583 362.81665 552.83417 366.72192 548.92896 c
370.62714 545.02368 376.9588 545.02368 380.86401 548.92896 c
S
0 i
1 1 1 sc
CM
196.36403 93.07106 m
200.26929 89.165817 200.26929 82.834183 196.36403 78.92894 c
192.45879 75.023682 186.12715 75.023682 182.22191 78.92894 c
178.31665 82.834183 178.31665 89.165817 182.22191 93.07106 c
186.12715 96.976318 192.45879 96.976318 196.36403 93.07106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
187.36403 548.92896 m
191.26929 552.83417 191.26929 559.16583 187.36403 563.07104 c
183.45879 566.97632 177.12715 566.97632 173.22191 563.07104 c
169.31665 559.16583 169.31665 552.83417 173.22191 548.92896 c
177.12715 545.02368 183.45879 545.02368 187.36403 548.92896 c
S
0 i
1 1 1 sc
CM
226.86403 93.07106 m
230.76929 89.165817 230.76929 82.834183 226.86403 78.92894 c
222.95879 75.023682 216.62715 75.023682 212.72191 78.92894 c
208.81665 82.834183 208.81665 89.165817 212.72191 93.07106 c
216.62715 96.976318 222.95879 96.976318 226.86403 93.07106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
217.86403 548.92896 m
221.76929 552.83417 221.76929 559.16583 217.86403 563.07104 c
213.95879 566.97632 207.62715 566.97632 203.72191 563.07104 c
199.81665 559.16583 199.81665 552.83417 203.72191 548.92896 c
207.62715 545.02368 213.95879 545.02368 217.86403 548.92896 c
S
-7 556 m
42.779949 556.28516 108.22005 556.21484 158 556.5 c
158.33411 556.48291 158.64574 556.46625 158.93658 556.45013 c
S
0 i
CM
175.90173 86.317688 m
167.65079 88.536224 l
168.2265 82.563911 l
h
175.90173 86.317688 m
f
0 J
0 j
1 0 0 -1 9 642 cm
166.90173 555.68231 m
158.65079 553.46381 l
159.2265 559.4361 l
h
166.90173 555.68231 m
S
CM
244.56073 89.767761 m
245.53705 88.791458 245.53705 87.208542 244.56073 86.232239 c
243.58443 85.25592 242.00151 85.25592 241.02521 86.232239 c
240.04889 87.208542 240.04889 88.791458 241.02521 89.767761 c
242.00151 90.74408 243.58443 90.74408 244.56073 89.767761 c
f
272.06073 89.767761 m
273.03705 88.791458 273.03705 87.208542 272.06073 86.232239 c
271.08441 85.25592 269.50153 85.25592 268.52521 86.232239 c
267.54889 87.208542 267.54889 88.791458 268.52521 89.767761 c
269.50153 90.74408 271.08441 90.74408 272.06073 89.767761 c
f
258.56073 89.767761 m
259.53705 88.791458 259.53705 87.208542 258.56073 86.232239 c
257.58441 85.25592 256.00153 85.25592 255.02521 86.232239 c
254.04889 87.208542 254.04889 88.791458 255.02521 89.767761 c
256.00153 90.74408 257.58441 90.74408 258.56073 89.767761 c
f
1 J
1 j
0.60000002 i
1 0 0 -1 9 642 cm
483.79297 556 m
533.57294 556.28516 599.013 556.21484 648.79297 556.5 c
649.12708 556.48291 649.43872 556.46625 649.72955 556.45013 c
S
0 i
CM
666.6947 86.317688 m
658.44379 88.536224 l
659.01947 82.563911 l
h
666.6947 86.317688 m
f
0 J
0 j
1 0 0 -1 9 642 cm
657.6947 555.68231 m
649.44379 553.46381 l
650.01947 559.4361 l
h
657.6947 555.68231 m
S
/Cs2 SC
0 sc
1 0 0 -1 85.292969 100.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-63.695999 5.776001 m
(-.//#\)0#1/+.11\(2#)[ 10.368000 8.592000 8.000000 8.000000 8.592000 8.896000 9.184000 8.592000 5.328000 8.000000 4.448000 8.592000 5.328000 5.328000 3.552000 8.000000 0.000000 ] xS
1 0 0 -1 216.29297 115.5 cm
-37.792 5.776001 m
(3"#+45#5#)[ 9.184000 8.896000 8.592000 4.448000 9.488000 8.896000 8.592000 8.896000 0.000000 ] xS
1 0 0 -1 586.29297 120.5 cm
-112.024 5.776001 m
(/#$51\(*6+$"#$%+#\)7/+.\)7+8#.2#/)[ 8.000000 8.592000 8.592000 8.896000 5.328000 3.552000 5.040000 8.000000 4.448000 8.592000 8.896000 8.592000 8.592000 8.304000 4.448000 8.592000 8.896000 9.488000 8.000000 4.448000 8.592000 8.896000 9.488000 4.448000 3.552000 8.592000 8.592000 8.000000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
414.79297 32 m
482.79297 32 l
487.76352 32 491.79297 27.970562 491.79297 23 c
491.79297 11 l
491.79297 6.0294371 487.76352 2 482.79297 2 c
414.79297 2 l
409.82242 2 405.79297 6.0294371 405.79297 11 c
405.79297 23 l
405.79297 27.970562 409.82242 32 414.79297 32 c
h
414.79297 32 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
405.79297 610 m
473.79297 610 l
478.76352 610 482.79297 614.02942 482.79297 619 c
482.79297 631 l
482.79297 635.97058 478.76352 640 473.79297 640 c
405.79297 640 l
400.82242 640 396.79297 635.97058 396.79297 631 c
396.79297 619 l
396.79297 614.02942 400.82242 610 405.79297 610 c
h
405.79297 610 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 448.79297 17 cm
/F1.1[ 14 0 0 -14 0 0]sf
-35.917 -3.3919983 m
(!"#$%&'\(\)*+)[ 10.108000 7.784000 7.518000 7.518000 7.266000 8.302000 8.036000 3.108000 7.784000 4.410000 0.000000 ] xS
-3.892 13 m
(9)s
/Cs1 SC
1 1 1 sc
CM
389.86401 24.07106 m
393.76929 20.165819 393.76929 13.83418 389.86401 9.9289398 c
385.9588 6.0236802 379.62714 6.0236802 375.72192 9.9289398 c
371.81665 13.83418 371.81665 20.165819 375.72192 24.07106 c
379.62714 27.97632 385.9588 27.97632 389.86401 24.07106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
380.86401 617.92896 m
384.76929 621.83417 384.76929 628.16583 380.86401 632.07104 c
376.9588 635.97632 370.62714 635.97632 366.72192 632.07104 c
362.81665 628.16583 362.81665 621.83417 366.72192 617.92896 c
370.62714 614.02368 376.9588 614.02368 380.86401 617.92896 c
S
483.79297 625 m
533.57294 625.28516 599.013 625.21484 648.79297 625.5 c
649.12708 625.48291 649.43872 625.46625 649.72955 625.45013 c
S
0 i
CM
666.6947 17.31769 m
658.44379 19.536224 l
659.01947 13.563909 l
h
666.6947 17.31769 m
f
0 J
0 j
1 0 0 -1 9 642 cm
657.6947 624.68231 m
649.44379 622.46381 l
650.01947 628.4361 l
h
657.6947 624.68231 m
S
/Cs2 SC
0 sc
1 0 0 -1 586.29297 51.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-112.024 5.776001 m
(/#$51\(*6+$"#$%+#\)7/+.\)7+8#.2#/)[ 8.000000 8.592000 8.592000 8.896000 5.328000 3.552000 5.040000 8.000000 4.448000 8.592000 8.896000 8.592000 8.592000 8.304000 4.448000 8.592000 8.896000 9.488000 8.000000 4.448000 8.592000 8.896000 9.488000 4.448000 3.552000 8.592000 8.592000 8.000000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
414.79297 162 m
482.79297 162 l
487.76352 162 491.79297 157.97057 491.79297 153 c
491.79297 141 l
491.79297 136.02943 487.76352 132 482.79297 132 c
414.79297 132 l
409.82242 132 405.79297 136.02943 405.79297 141 c
405.79297 153 l
405.79297 157.97057 409.82242 162 414.79297 162 c
h
414.79297 162 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
405.79297 480 m
473.79297 480 l
478.76352 480 482.79297 484.02945 482.79297 489 c
482.79297 501 l
482.79297 505.97055 478.76352 510 473.79297 510 c
405.79297 510 l
400.82242 510 396.79297 505.97055 396.79297 501 c
396.79297 489 l
396.79297 484.02945 400.82242 480 405.79297 480 c
h
405.79297 480 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 448.79297 147 cm
/F1.1[ 14 0 0 -14 0 0]sf
-35.917 -3.3919983 m
(!"#$%&'\(\)*+)[ 10.108000 7.784000 7.518000 7.518000 7.266000 8.302000 8.036000 3.108000 7.784000 4.410000 0.000000 ] xS
-3.892 13 m
(:)s
/Cs1 SC
1 1 1 sc
CM
389.86401 154.07106 m
393.76929 150.16582 393.76929 143.83418 389.86401 139.92894 c
385.9588 136.02368 379.62714 136.02368 375.72192 139.92894 c
371.81665 143.83418 371.81665 150.16582 375.72192 154.07106 c
379.62714 157.97632 385.9588 157.97632 389.86401 154.07106 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
380.86401 487.92896 m
384.76929 491.83417 384.76929 498.16583 380.86401 502.07104 c
376.9588 505.97632 370.62714 505.97632 366.72192 502.07104 c
362.81665 498.16583 362.81665 491.83417 366.72192 487.92896 c
370.62714 484.02368 376.9588 484.02368 380.86401 487.92896 c
S
483.79297 495 m
533.57294 495.28516 599.013 495.21484 648.79297 495.5 c
649.12708 495.48288 649.43872 495.46628 649.72955 495.45013 c
S
0 i
CM
666.6947 147.31769 m
658.44379 149.53622 l
659.01947 143.5639 l
h
666.6947 147.31769 m
f
0 J
0 j
1 0 0 -1 9 642 cm
657.6947 494.68231 m
649.44379 492.46378 l
650.01947 498.4361 l
h
657.6947 494.68231 m
S
/Cs2 SC
0 sc
1 0 0 -1 586.29297 181.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-112.024 5.776001 m
(/#$51\(*6+$"#$%+#\)7/+.\)7+8#.2#/)[ 8.000000 8.592000 8.592000 8.896000 5.328000 3.552000 5.040000 8.000000 4.448000 8.592000 8.896000 8.592000 8.592000 8.304000 4.448000 8.592000 8.896000 9.488000 8.000000 4.448000 8.592000 8.896000 9.488000 4.448000 3.552000 8.592000 8.592000 8.000000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
298.36401 93.07106 m
302.26929 89.165817 302.26929 82.834183 298.36401 78.92894 c
294.4588 75.023682 288.12714 75.023682 284.22192 78.92894 c
280.31665 82.834183 280.31665 89.165817 284.22192 93.07106 c
288.12714 96.976318 294.4588 96.976318 298.36401 93.07106 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 9 642 cm
289.36401 548.92896 m
293.26929 552.83417 293.26929 559.16583 289.36401 563.07104 c
285.4588 566.97632 279.12714 566.97632 275.22192 563.07104 c
271.31665 559.16583 271.31665 552.83417 275.22192 548.92896 c
279.12714 545.02368 285.4588 545.02368 289.36401 548.92896 c
S
291.0311 550.17456 m
356.81754 506.31696 l
S
0 i
CM
372.47394 140.12065 m
364.15344 138.1792 l
367.48166 133.1869 l
h
372.47394 140.12065 m
f
0 J
0 j
1 0 0 -1 9 642 cm
363.47394 501.87933 m
355.15344 503.8208 l
358.48166 508.81311 l
h
363.47394 501.87933 m
S
1 J
1 j
0.60000002 i
294.5 555 m
353.39459 555.74274 l
S
0 i
CM
370.39395 86.156372 m
362.4324 89.257011 l
362.35675 83.257492 l
h
370.39395 86.156372 m
f
0 J
0 j
1 0 0 -1 9 642 cm
361.39395 555.84363 m
353.4324 552.74298 l
353.35675 558.74249 l
h
361.39395 555.84363 m
S
1 J
1 j
0.60000002 i
290.34982 562.73425 m
356.19696 617.77203 l
S
0 i
CM
371.33514 19.097414 m
367.12091 26.529791 l
363.27301 21.926147 l
h
371.33514 19.097414 m
f
0 J
0 j
1 0 0 -1 9 642 cm
362.33514 622.90259 m
358.12091 615.47021 l
354.27301 620.07385 l
h
362.33514 622.90259 m
S
CM
449.64966 62.216141 m
448.38831 61.654549 446.91052 62.221813 446.34894 63.483158 c
445.78735 64.744507 446.35461 66.222275 447.61597 66.783859 c
448.87732 67.345451 450.3551 66.778191 450.91669 65.516838 c
451.47827 64.255493 450.91101 62.777721 449.64966 62.216141 c
f
449.96997 36.216141 m
448.70862 35.654549 447.23083 36.221813 446.66925 37.483158 c
446.10767 38.744503 446.67493 40.222279 447.93628 40.783859 c
449.19763 41.345451 450.67542 40.778187 451.237 39.516842 c
451.79858 38.255497 451.23132 36.777721 449.96997 36.216141 c
f
450.24008 49.946011 m
448.97876 49.384418 447.50098 49.951683 446.93939 51.213032 c
446.37781 52.474373 446.94507 53.952148 448.20642 54.513733 c
449.46774 55.075321 450.94553 54.508057 451.50711 53.246712 c
452.0687 51.985367 451.50143 50.507595 450.24008 49.946011 c
f
ep
end
%%Trailer
%%EOF
